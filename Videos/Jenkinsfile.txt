pipeline{
    agent any
    environment {
        VERSION = "${env.BUILD_ID}"
    }
    
    stages{
        stage("sonar Quality Check"){
            
            agent {
                docker{
                    image 'maven'
                }
            }
            steps{
                echo "Checking Sonar Quality Status"
                script {
                  withSonarQubeEnv(credentialsId: 'sonar-token'){
                         sh 'mvn clean package sonar:sonar'
                        }
                }
            }
            
        }
        stage('Quality Gate Status') {
            steps {
                echo 'checking QUality Gate Status'
                script {
                waitForQualityGate abortPipeline: false, credentials: 'sonar-token'
                }
            }
        }
         stage('docker build and docker push to Nexus Repo') {
            steps {
                echo 'Building docker file'
                script {
                    withCredentials([string(credentialsld:'nexus_passwd', variable: 'nexus_creds')]){
                        sh '''
                           docker build -t 192.168.0.1:8081/springbootapp:${VERSION} .

                          docker login -u admin -p $nexus_creds 192.168.0.1:8083

                          docker push 192.168.0.1:8081/springbootapp:${VERSION}
                         # we do not want Image Locally so 
                         docker rmi 192.168.0.1:8081/springbootapp:${VERSION}
                                     '''
                                }
                }
            }
        }
         stage('Identifying misconfig using datree') {
            steps {
                echo 'Identifying misconfig using datree'
                script{
                    dir('kubernates/myapp/'){
                        withEnv(['DATREE_TOKEN=b7321a0-0227-4d1e-e328662a1']){
                          sh 'helm datree test . '
                        }
                      
                    }
                }
            }
        }
         stage('Pushing Helm chart to Nexus Repo') {
            steps {
                echo 'Pushing Helm chart to Nexus Repo'
                script {
                     withCredentials([string(credentialsld:'nexus_passwd', variable: 'nexus_creds')]){
                         dir('kubernates/'){
                          sh '''
                          helmversion=$(helm show  chart myapp | grep version| cut -d -f 2 |  tr -d ' ')
                          # Whatever file is in app directory this should be tar by name myapp
                          tar czvf myapp-${helmversion}.tgz myapp/
                           ''' 
                           curl -u admin:$nexus_creds http://192.168.0.1:8081/repository/helm-repo/ --upload-file myapp-${helmversion}.tgz -v
                           ''' 
                          }
                        }
                       
                }
                    
                    
            }
            
        }
        stage('test') {
            steps {
                echo 'Hello World'
            }
        }
    
            
    }
    post{
       post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "charerajat1234@gmail.com";  
		}
	  }
    }



}